# -*- coding: utf-8 -*-
"""
/***************************************************************************
 YOLOPlugin
                                 A QGIS plugin
 Detect planes, airports, ships, helicopters and oil tankers from satellite imagery using a YOLO model.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-26
        git sha              : $Format:%H$
        copyright            : (C) 2025 by John doe
        email                : john.doe@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

import numpy as np
from qgis.core import (
    QgsCategorizedSymbolRenderer,
    QgsFeature,
    QgsField,
    QgsFields,
    QgsFillSymbol,
    QgsGeometry,
    QgsPointXY,
    QgsProject,
    QgsRendererCategory,
    QgsVectorLayer,
)
from qgis.PyQt.QtCore import QCoreApplication, QMetaType
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from ultralytics import YOLO


class YOLOPlugin:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.actions = []
        self.menu = self.tr("&YOLO Plugin")

        model_path = os.path.join(self.plugin_dir, "models/YOLOv8s.pt")
        self.model = YOLO(model_path)

        self.class_colors = {
            0: "red",
            1: "blue",
            2: "orange",
            3: "yellow",
            4: "cyan",
        }

    def tr(self, message):
        return QCoreApplication.translate("YOLOPlugin", message)

    def add_action(self, icon_path, text, callback, parent=None):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        self.iface.addToolBarIcon(action)
        self.iface.addPluginToMenu(self.menu, action)
        self.actions.append(action)
        return action

    def initGui(self):
        icon_path = ":/plugins/yolo_plugin/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Run YOLO detection"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        self.detect_objects()

    def detect_objects(self):
        canvas = self.iface.mapCanvas()
        img = canvas.grab().toImage()

        width = img.width()
        height = img.height()
        ptr = img.bits()
        ptr.setsize(img.byteCount())

        img_array = np.array(ptr).reshape((height, width, 4))

        img_rgb = img_array[..., :3][..., ::-1]  # RGBA to BGR

        results = self.model.predict(img_rgb)

        layer = None
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == "YOLO Detections":
                layer = lyr
                break

        if layer is None:
            layer = QgsVectorLayer("Polygon?crs=EPSG:3857", "YOLO Detections", "memory")
            pr = layer.dataProvider()
            fields = QgsFields()
            fields.append(QgsField("class", QMetaType.Type.QString))
            pr.addAttributes(fields)
            layer.updateFields()
            QgsProject.instance().addMapLayer(layer)
        else:
            pr = layer.dataProvider()

        extent = canvas.extent()

        detected_classes = set()

        for r in results:
            for i, box in enumerate(r.boxes.xyxy):
                x_min, y_min, x_max, y_max = box.tolist()

                x1 = extent.xMinimum() + (x_min / width) * extent.width()
                y1 = extent.yMaximum() - (y_min / height) * extent.height()
                x2 = extent.xMinimum() + (x_max / width) * extent.width()
                y2 = extent.yMaximum() - (y_max / height) * extent.height()

                class_id = int(r.boxes.cls[i].item())
                conf = float(r.boxes.conf[i].item())

                if conf < 0.5:
                    continue

                class_name = r.names[class_id]
                detected_classes.add(class_name)

                feat = QgsFeature()
                feat.setGeometry(
                    QgsGeometry.fromPolygonXY(
                        [
                            [
                                QgsPointXY(x1, y1),
                                QgsPointXY(x2, y1),
                                QgsPointXY(x2, y2),
                                QgsPointXY(x1, y2),
                                QgsPointXY(x1, y1),
                            ]
                        ]
                    )
                )
                feat.setAttributes([class_name])
                pr.addFeature(feat)

        layer.updateExtents()

        categories = []
        for class_name in detected_classes:
            for class_id, color_name in self.class_colors.items():
                if r.names[class_id] == class_name:
                    symbol = QgsFillSymbol.createSimple(
                        {
                            "color": "0,0,0,0",
                            "outline_color": color_name,
                            "outline_width": "1.0",
                        }
                    )
                    cat = QgsRendererCategory(class_name, symbol, class_name)
                    categories.append(cat)

        if categories:
            old_renderer = layer.renderer()
            if isinstance(old_renderer, QgsCategorizedSymbolRenderer):
                for cat in old_renderer.categories():
                    if cat.value() not in [c.value() for c in categories]:
                        categories.append(cat)

            renderer = QgsCategorizedSymbolRenderer("class", categories)
            layer.setRenderer(renderer)

        layer.triggerRepaint()
